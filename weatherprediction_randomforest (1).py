# -*- coding: utf-8 -*-
"""weatherprediction_randomforest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1tfHgbYc9MvqK-ycEC2yU60DWHqrH_A
"""

import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns

weather = pd.read_csv('4056069.csv', index_col="DATE",parse_dates=["DATE"])
weather

# CHECKING FOR MISSING VALUES
weather.isnull().mean()*100

# CHANGING ALL COLUMN NAMES TO LOWER CASING
weather.columns = weather.columns.str.lower()
weather

weather.columns

weather.index

# SUBSETTING TO CORE VALUES, THIS MEANS WE WILL DROP IRRELEVANT COLUMNS THEN WE CAN JUST PERFORM FEATURE-TARGET SPLITTING
weather = weather[["awnd","prcp","tmax","tmin",]]

# Convert relevant columns to numeric, coercing errors
for col in ["awnd", "prcp", "tmax", "tmin"]:
    weather[col] = pd.to_numeric(weather[col], errors='coerce')

# Fill NaN values using forward fill after converting to numeric
weather = weather.fillna(method='ffill')

weather

weather.dtypes

# Create lag features so model can learn from past data
weather['tmax_lag1'] = weather['tmax'].shift(1)
weather['tmin_lag1'] = weather['tmin'].shift(1)
weather['prcp_lag1'] = weather['prcp'].shift(1)
weather['awnd_lag1'] = weather['awnd'].shift(1)

# Drop rows with NaN caused by lag
weather.dropna(inplace=True)

# TRAIN-TEST SPLIT
from sklearn.model_selection import train_test_split

# Features and target
X = weather[['tmax_lag1', 'tmin_lag1', 'prcp_lag1', 'awnd_lag1']]
y = weather['tmax']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

# TRAIN THE MODEL
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

model = RandomForestRegressor()
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"MAE: {mae}")

results_weather = pd.DataFrame({
    'Actual Tmax': y_test.values,
    'Predicted Tmax': y_pred
})

print(results_weather.tail(10))

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# Load and preprocess data
weather = pd.read_csv('4056069.csv', index_col="DATE", parse_dates=["DATE"])
weather.columns = weather.columns.str.lower()
weather = weather[["awnd", "prcp", "tmax", "tmin"]]

for col in ["awnd", "prcp", "tmax", "tmin"]:
    weather[col] = pd.to_numeric(weather[col], errors='coerce')
weather.fillna(method='ffill', inplace=True)

# Create lag features
weather['tmax_lag1'] = weather['tmax'].shift(1)
weather['tmin_lag1'] = weather['tmin'].shift(1)
weather['prcp_lag1'] = weather['prcp'].shift(1)
weather['awnd_lag1'] = weather['awnd'].shift(1)
weather.dropna(inplace=True)

# Train-Test Split
X = weather[['tmax_lag1', 'tmin_lag1', 'prcp_lag1', 'awnd_lag1']]
y = weather['tmax']
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

# Train Model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
results_weather = pd.DataFrame({
    'Actual Tmax': y_test.values,
    'Predicted Tmax': y_pred
}, index=y_test.index)

# Streamlit App
st.title("üå§Ô∏è Weather Tmax Prediction App")

st.write(f"**Model MAE:** {mae:.2f}")

st.header("Make a Prediction")
tmax_lag1 = st.number_input("Yesterday's Tmax", value=25.0)
tmin_lag1 = st.number_input("Yesterday's Tmin", value=18.0)
prcp_lag1 = st.number_input("Yesterday's Precipitation (prcp)", value=0.0)
awnd_lag1 = st.number_input("Yesterday's Average Wind Speed (awnd)", value=5.0)

if st.button("Predict Tmax"):
    user_input = np.array([[tmax_lag1, tmin_lag1, prcp_lag1, awnd_lag1]])
    prediction = model.predict(user_input)[0]
    st.success(f"Predicted Tmax for today: **{prediction:.2f}¬∞C**")

st.header("Actual vs Predicted Tmax (Test Set)")
st.line_chart(results_weather)

st.header("Sample of Actual vs Predicted Tmax")
st.dataframe(results_weather.tail(10))
